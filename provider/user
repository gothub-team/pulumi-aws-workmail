package provider

import (
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/workmail"
	p "github.com/pulumi/pulumi-go-provider"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Each resource has a controlling struct.
// Resource behavior is determined by implementing methods on the controlling struct.
// The `Create` method is mandatory, but other methods are optional.
// - Check: Remap inputs before they are typed.
// - Diff: Change how instances of a resource are compared.
// - Update: Mutate a resource in place.
// - Read: Get the state of a resource from the backing provider.
// - Delete: Custom logic when the resource is deleted.
// - Annotate: Describe fields and set defaults for a resource.
// - WireDependencies: Control how outputs and secrets flows through values.
type User struct{}

// Each resource has an input struct, defining what arguments it accepts.
type UserArgs struct {
	// The AWS Region. TODO: This should be passed as a pulumi.Provider
	Region string `pulumi:"region"`
	// The organization alias.
	Alias string `pulumi:"alias"`
	// The domain name.
	DomainName string `pulumi:"domainName"`
	// The hosted zone id for the domain.
	HostedZoneId string `pulumi:"hostedZoneId"`
	// The idempotency token associated with the request.
	ClientToken *string `pulumi:"clientToken,optional"`
	// The AWS Directory Service directory ID.
	DirectoryId *string `pulumi:"directoryId,optional"`
	// The Amazon Resource Name (ARN) of a customer managed key from AWS KMS.
	KmsKeyArn *string `pulumi:"kmsKeyArn,optional"`
	// When true , allows organization interoperability between WorkMail and Microsoft Exchange. If true , you must include a AD Connector directory ID in the request.
	EnableInteroperability *bool `pulumi:"enableInteroperability,optional"`
}

// Each resource has a state, describing the fields that exist on the created resource.
type UserState struct {
	// It is generally a good idea to embed args in outputs, but it isn't strictly necessary.
	UserArgs

	// The organization id.
	UserId string `pulumi:"organizationId"`

	// Mail domain records.
	Records []DnsRecord `pulumi:"records"`
}

// All resources must implement Create at a minimum.
func (User) Create(ctx p.Context, name string, input UserArgs, preview bool) (string, UserState, error) {
	state := UserState{UserArgs: input}
	if preview {
		return name, state, nil
	}

	cfg, err := config.LoadDefaultConfig(ctx)
	if err != nil {
		return "", state, err
	}
	cfg.Region = input.Region

	// Create the WorkMail service client using the config
	workmailclient := workmail.NewFromConfig(cfg)

	// Create the organization
	organization, err := workmailclient.CreateUser(ctx, &workmail.CreateUserInput{
		DisplayName: pulumi.String("John Doe").ToStringPtrOutput(),
	})
	if err != nil {
		return "", state, err
	}

	state.UserId = *organization.UserId

	return "*organization.UserId", state, nil
}

// The Delete method will run when the resource is deleted.
func (User) Delete(ctx p.Context, id string, props UserState) error {
	cfg, err := config.LoadDefaultConfig(ctx)
	if err != nil {
		return err
	}
	cfg.Region = props.Region

	// Create the WorkMail service client using the config
	workmailclient := workmail.NewFromConfig(cfg)

	organization, err := workmailclient.DescribeUser(ctx, &workmail.DescribeUserInput{
		UserId: &props.UserId,
	})
	if err != nil {
		return nil
	}
	if *organization.State != "Deleted" {
		// Delete the organization
		_, err = workmailclient.DeleteUser(ctx, &workmail.DeleteUserInput{
			UserId:          &props.UserId,
			DeleteDirectory: true,
			ForceDelete:     true,
		})
	}
	return err
}
