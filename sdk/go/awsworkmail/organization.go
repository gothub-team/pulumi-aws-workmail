// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsworkmail

import (
	"context"
	"reflect"

	"errors"
	"github.com/gothub-team/pulumi-awsworkmail/sdk/go/awsworkmail/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Organization struct {
	pulumi.CustomResourceState

	Alias                  pulumix.Output[string]                             `pulumi:"alias"`
	ClientToken            pulumix.Output[string]                             `pulumi:"clientToken"`
	DirectoryId            pulumix.Output[string]                             `pulumi:"directoryId"`
	Domains                pulumix.GArrayOutput[DomainArgs, DomainArgsOutput] `pulumi:"domains"`
	EnableInteroperability pulumix.Output[bool]                               `pulumi:"enableInteroperability"`
	KmsKeyArn              pulumix.Output[string]                             `pulumi:"kmsKeyArn"`
}

// NewOrganization registers a new resource with the given unique name, arguments, and options.
func NewOrganization(ctx *pulumi.Context,
	name string, args *OrganizationArgs, opts ...pulumi.ResourceOption) (*Organization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.ClientToken == nil {
		return nil, errors.New("invalid value for required argument 'ClientToken'")
	}
	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	if args.EnableInteroperability == nil {
		return nil, errors.New("invalid value for required argument 'EnableInteroperability'")
	}
	if args.KmsKeyArn == nil {
		return nil, errors.New("invalid value for required argument 'KmsKeyArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Organization
	err := ctx.RegisterResource("awsworkmail:index:Organization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganization gets an existing Organization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationState, opts ...pulumi.ResourceOption) (*Organization, error) {
	var resource Organization
	err := ctx.ReadResource("awsworkmail:index:Organization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Organization resources.
type organizationState struct {
}

type OrganizationState struct {
}

func (OrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationState)(nil)).Elem()
}

type organizationArgs struct {
	Alias                  string       `pulumi:"alias"`
	ClientToken            string       `pulumi:"clientToken"`
	DirectoryId            string       `pulumi:"directoryId"`
	Domains                []DomainArgs `pulumi:"domains"`
	EnableInteroperability bool         `pulumi:"enableInteroperability"`
	KmsKeyArn              string       `pulumi:"kmsKeyArn"`
}

// The set of arguments for constructing a Organization resource.
type OrganizationArgs struct {
	Alias                  pulumix.Input[string]
	ClientToken            pulumix.Input[string]
	DirectoryId            pulumix.Input[string]
	Domains                pulumix.Input[[]*DomainArgsArgs]
	EnableInteroperability pulumix.Input[bool]
	KmsKeyArn              pulumix.Input[string]
}

func (OrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationArgs)(nil)).Elem()
}

type OrganizationOutput struct{ *pulumi.OutputState }

func (OrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Organization)(nil)).Elem()
}

func (o OrganizationOutput) ToOrganizationOutput() OrganizationOutput {
	return o
}

func (o OrganizationOutput) ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput {
	return o
}

func (o OrganizationOutput) ToOutput(ctx context.Context) pulumix.Output[Organization] {
	return pulumix.Output[Organization]{
		OutputState: o.OutputState,
	}
}

func (o OrganizationOutput) Alias() pulumix.Output[string] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.Output[string] { return v.Alias })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o OrganizationOutput) ClientToken() pulumix.Output[string] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.Output[string] { return v.ClientToken })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o OrganizationOutput) DirectoryId() pulumix.Output[string] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.Output[string] { return v.DirectoryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o OrganizationOutput) Domains() pulumix.GArrayOutput[DomainArgs, DomainArgsOutput] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.GArrayOutput[DomainArgs, DomainArgsOutput] { return v.Domains })
	unwrapped := pulumix.Flatten[[]DomainArgs, pulumix.GArrayOutput[DomainArgs, DomainArgsOutput]](value)
	return pulumix.GArrayOutput[DomainArgs, DomainArgsOutput]{OutputState: unwrapped.OutputState}
}

func (o OrganizationOutput) EnableInteroperability() pulumix.Output[bool] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.Output[bool] { return v.EnableInteroperability })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

func (o OrganizationOutput) KmsKeyArn() pulumix.Output[string] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.Output[string] { return v.KmsKeyArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(OrganizationOutput{})
}
