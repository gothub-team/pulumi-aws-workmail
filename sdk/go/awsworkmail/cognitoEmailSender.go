// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsworkmail

import (
	"context"
	"reflect"

	"errors"
	"github.com/gothub-team/pulumi-awsworkmail/sdk/go/awsworkmail/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type CognitoEmailSender struct {
	pulumi.CustomResourceState

	KmsKeyArn  pulumix.Output[string] `pulumi:"kmsKeyArn"`
	LambdaArn  pulumix.Output[string] `pulumi:"lambdaArn"`
	UserPoolId pulumix.Output[string] `pulumi:"userPoolId"`
}

// NewCognitoEmailSender registers a new resource with the given unique name, arguments, and options.
func NewCognitoEmailSender(ctx *pulumi.Context,
	name string, args *CognitoEmailSenderArgs, opts ...pulumi.ResourceOption) (*CognitoEmailSender, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KmsKeyArn == nil {
		return nil, errors.New("invalid value for required argument 'KmsKeyArn'")
	}
	if args.LambdaArn == nil {
		return nil, errors.New("invalid value for required argument 'LambdaArn'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CognitoEmailSender
	err := ctx.RegisterResource("awsworkmail:index:CognitoEmailSender", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCognitoEmailSender gets an existing CognitoEmailSender resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCognitoEmailSender(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CognitoEmailSenderState, opts ...pulumi.ResourceOption) (*CognitoEmailSender, error) {
	var resource CognitoEmailSender
	err := ctx.ReadResource("awsworkmail:index:CognitoEmailSender", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CognitoEmailSender resources.
type cognitoEmailSenderState struct {
}

type CognitoEmailSenderState struct {
}

func (CognitoEmailSenderState) ElementType() reflect.Type {
	return reflect.TypeOf((*cognitoEmailSenderState)(nil)).Elem()
}

type cognitoEmailSenderArgs struct {
	KmsKeyArn  string `pulumi:"kmsKeyArn"`
	LambdaArn  string `pulumi:"lambdaArn"`
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a CognitoEmailSender resource.
type CognitoEmailSenderArgs struct {
	KmsKeyArn  pulumix.Input[string]
	LambdaArn  pulumix.Input[string]
	UserPoolId pulumix.Input[string]
}

func (CognitoEmailSenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cognitoEmailSenderArgs)(nil)).Elem()
}

type CognitoEmailSenderOutput struct{ *pulumi.OutputState }

func (CognitoEmailSenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CognitoEmailSender)(nil)).Elem()
}

func (o CognitoEmailSenderOutput) ToCognitoEmailSenderOutput() CognitoEmailSenderOutput {
	return o
}

func (o CognitoEmailSenderOutput) ToCognitoEmailSenderOutputWithContext(ctx context.Context) CognitoEmailSenderOutput {
	return o
}

func (o CognitoEmailSenderOutput) ToOutput(ctx context.Context) pulumix.Output[CognitoEmailSender] {
	return pulumix.Output[CognitoEmailSender]{
		OutputState: o.OutputState,
	}
}

func (o CognitoEmailSenderOutput) KmsKeyArn() pulumix.Output[string] {
	value := pulumix.Apply[CognitoEmailSender](o, func(v CognitoEmailSender) pulumix.Output[string] { return v.KmsKeyArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CognitoEmailSenderOutput) LambdaArn() pulumix.Output[string] {
	value := pulumix.Apply[CognitoEmailSender](o, func(v CognitoEmailSender) pulumix.Output[string] { return v.LambdaArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CognitoEmailSenderOutput) UserPoolId() pulumix.Output[string] {
	value := pulumix.Apply[CognitoEmailSender](o, func(v CognitoEmailSender) pulumix.Output[string] { return v.UserPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CognitoEmailSenderOutput{})
}
