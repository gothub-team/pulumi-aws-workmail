// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsworkmail

import (
	"context"
	"reflect"

	"errors"
	"github.com/gothub-team/pulumi-awsworkmail/sdk/go/awsworkmail/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WorkmailRegistration struct {
	pulumi.CustomResourceState

	EmailPrefix    pulumix.Output[string] `pulumi:"emailPrefix"`
	EntityId       pulumix.Output[string] `pulumi:"entityId"`
	OrganizationId pulumix.Output[string] `pulumi:"organizationId"`
	Region         pulumix.Output[string] `pulumi:"region"`
}

// NewWorkmailRegistration registers a new resource with the given unique name, arguments, and options.
func NewWorkmailRegistration(ctx *pulumi.Context,
	name string, args *WorkmailRegistrationArgs, opts ...pulumi.ResourceOption) (*WorkmailRegistration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EmailPrefix == nil {
		return nil, errors.New("invalid value for required argument 'EmailPrefix'")
	}
	if args.EntityId == nil {
		return nil, errors.New("invalid value for required argument 'EntityId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkmailRegistration
	err := ctx.RegisterResource("awsworkmail:index:WorkmailRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkmailRegistration gets an existing WorkmailRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkmailRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkmailRegistrationState, opts ...pulumi.ResourceOption) (*WorkmailRegistration, error) {
	var resource WorkmailRegistration
	err := ctx.ReadResource("awsworkmail:index:WorkmailRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkmailRegistration resources.
type workmailRegistrationState struct {
}

type WorkmailRegistrationState struct {
}

func (WorkmailRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*workmailRegistrationState)(nil)).Elem()
}

type workmailRegistrationArgs struct {
	EmailPrefix    string `pulumi:"emailPrefix"`
	EntityId       string `pulumi:"entityId"`
	OrganizationId string `pulumi:"organizationId"`
	Region         string `pulumi:"region"`
}

// The set of arguments for constructing a WorkmailRegistration resource.
type WorkmailRegistrationArgs struct {
	EmailPrefix    pulumix.Input[string]
	EntityId       pulumix.Input[string]
	OrganizationId pulumix.Input[string]
	Region         pulumix.Input[string]
}

func (WorkmailRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workmailRegistrationArgs)(nil)).Elem()
}

type WorkmailRegistrationOutput struct{ *pulumi.OutputState }

func (WorkmailRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkmailRegistration)(nil)).Elem()
}

func (o WorkmailRegistrationOutput) ToWorkmailRegistrationOutput() WorkmailRegistrationOutput {
	return o
}

func (o WorkmailRegistrationOutput) ToWorkmailRegistrationOutputWithContext(ctx context.Context) WorkmailRegistrationOutput {
	return o
}

func (o WorkmailRegistrationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkmailRegistration] {
	return pulumix.Output[WorkmailRegistration]{
		OutputState: o.OutputState,
	}
}

func (o WorkmailRegistrationOutput) EmailPrefix() pulumix.Output[string] {
	value := pulumix.Apply[WorkmailRegistration](o, func(v WorkmailRegistration) pulumix.Output[string] { return v.EmailPrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o WorkmailRegistrationOutput) EntityId() pulumix.Output[string] {
	value := pulumix.Apply[WorkmailRegistration](o, func(v WorkmailRegistration) pulumix.Output[string] { return v.EntityId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o WorkmailRegistrationOutput) OrganizationId() pulumix.Output[string] {
	value := pulumix.Apply[WorkmailRegistration](o, func(v WorkmailRegistration) pulumix.Output[string] { return v.OrganizationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o WorkmailRegistrationOutput) Region() pulumix.Output[string] {
	value := pulumix.Apply[WorkmailRegistration](o, func(v WorkmailRegistration) pulumix.Output[string] { return v.Region })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WorkmailRegistrationOutput{})
}
